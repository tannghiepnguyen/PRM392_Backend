// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PRM392_Backend.Infrastructure.Persistance;

#nullable disable

namespace PRM392_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3cb28e4f-3fd1-434b-9935-779228be461d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fca9741b-e4c7-4597-9a82-0f2f9621e747",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Cart", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.CartItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("5a2834d9-2630-4d1f-8126-daa29b800e78"),
                            CategoryName = "Burgers",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/deliveroo-dab94.appspot.com/o/Splash%2Fburger.jpg?alt=media&token=4913b4f4-b37f-44a6-9fae-48beec255483",
                            IsActive = true
                        },
                        new
                        {
                            ID = new Guid("2d85ef10-9237-46e8-8131-955eb56c27f0"),
                            CategoryName = "Pizzas",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/deliveroo-dab94.appspot.com/o/Splash%2Fpizza.jpg?alt=media&token=ae5cf452-4184-4b20-9f39-c1a49ca5b975",
                            IsActive = true
                        },
                        new
                        {
                            ID = new Guid("82de5b3d-ca35-420d-8e98-cc432b510201"),
                            CategoryName = "Sushi",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/deliveroo-dab94.appspot.com/o/Splash%2Fsushi.jpg?alt=media&token=c86cb412-e217-4f71-a64e-c6e17bc3d6c6",
                            IsActive = true
                        },
                        new
                        {
                            ID = new Guid("804563c3-05f3-4997-98fd-b23e4a310fb6"),
                            CategoryName = "Italian",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/deliveroo-dab94.appspot.com/o/Splash%2Fmiy.jpg?alt=media&token=dc0800c8-8415-4c2b-90f1-8e26756dc469",
                            IsActive = true
                        },
                        new
                        {
                            ID = new Guid("beffabc8-6f9f-4d08-b69a-8cb5226e8486"),
                            CategoryName = "Chinese",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/deliveroo-dab94.appspot.com/o/Splash%2Fchinese.jpg?alt=media&token=84155e4f-4949-4846-927a-5f0d7c08ed7b",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CartID")
                        .IsUnique()
                        .HasFilter("[CartID] IS NOT NULL");

                    b.HasIndex("StoreLocationID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TechnicalSpecification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderID");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = new Guid("83c88bee-7638-4499-9a9c-49701b7db3e9"),
                            BriefDescription = " A juicy beef patty with fresh lettuce, tomatoes, onions, and cheddar cheese, served on a sesame seed bun.",
                            CategoryId = new Guid("5a2834d9-2630-4d1f-8126-daa29b800e78"),
                            FullDescription = "The Classic Beef Burger is a timeless favorite, featuring a perfectly seasoned, 100% beef patty grilled to perfection. Topped with crisp lettuce, ripe tomatoes, tangy pickles, and a slice of melted cheddar cheese, this burger is nestled between a toasted sesame seed bun. Each bite offers a mouthwatering combination of fresh, savory, and slightly tangy flavors, perfect for burger enthusiasts.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/ClassicBeefBurger.jpg",
                            IsActive = true,
                            Price = 8.9900000000000002,
                            ProductName = "Classic Beef Burger",
                            StoreId = new Guid("deb70b97-b1fc-48f6-860c-fe9c15bcc4c7"),
                            TechnicalSpecification = "Beef, tomato, lettuce, mayonnaise, tomato sauce"
                        },
                        new
                        {
                            ID = new Guid("3a1d5bae-ceda-48c0-af14-738874c3dfec"),
                            BriefDescription = "Crispy, spicy chicken breast with creamy mayo, pickles, and lettuce on a soft brioche bun.",
                            CategoryId = new Guid("5a2834d9-2630-4d1f-8126-daa29b800e78"),
                            FullDescription = "For those who love a kick of heat, the Spicy Chicken Burger delivers! A succulent chicken breast is marinated in a fiery blend of spices, coated in crispy breadcrumbs, and fried to golden perfection. Paired with creamy mayonnaise, crunchy pickles, and fresh lettuce, all inside a soft, buttery brioche bun. This burger combines a spicy crunch with the cool creaminess of the mayo, making each bite satisfying and full of flavor.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/SpicyChickenBurger.jpg",
                            IsActive = true,
                            Price = 9.4900000000000002,
                            ProductName = "Spicy Chicken Burger",
                            StoreId = new Guid("deb70b97-b1fc-48f6-860c-fe9c15bcc4c7"),
                            TechnicalSpecification = "Lettuce, pickles, spicy mayonnaise, chicken"
                        },
                        new
                        {
                            ID = new Guid("cc5ec930-95df-4fa6-b038-e5b361945b02"),
                            BriefDescription = "A plant-based patty with avocado, vegan cheese, and fresh greens on a multigrain bun.",
                            CategoryId = new Guid("5a2834d9-2630-4d1f-8126-daa29b800e78"),
                            FullDescription = "A fresh and nutritious choice, the Vegan Avocado Burger features a flavorful plant-based patty made from lentils, mushrooms, and chickpeas. It's topped with creamy avocado slices, vegan cheddar cheese, mixed greens, and a hint of garlic aioli. All these ingredients are packed inside a wholesome multigrain bun, offering a satisfying and guilt-free experience without sacrificing taste. This burger is ideal for vegans and health-conscious customers alike.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/VeganAvocadoBurger.jpg",
                            IsActive = true,
                            Price = 12.99,
                            ProductName = "Vegan Avocado Burger",
                            StoreId = new Guid("deb70b97-b1fc-48f6-860c-fe9c15bcc4c7"),
                            TechnicalSpecification = "Avocado, vegan cheese, mixed greens, multigrain bun"
                        },
                        new
                        {
                            ID = new Guid("08a7cf22-90a7-4823-9fe6-4264d3ee0a87"),
                            BriefDescription = "A classic pizza with tomato sauce, mozzarella cheese, and fresh basil leaves.",
                            CategoryId = new Guid("2d85ef10-9237-46e8-8131-955eb56c27f0"),
                            FullDescription = "The Margherita Pizza is a timeless classic that never goes out of style. It features a thin, crispy crust topped with tangy tomato sauce, creamy mozzarella cheese, and fragrant basil leaves. Each bite offers a burst of fresh flavors and a perfect balance of textures, making it a favorite among pizza lovers. Whether you're a fan of traditional recipes or simply appreciate the simplicity of good ingredients, this pizza is sure to satisfy your cravings.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/MargheritaPizza.jpg",
                            IsActive = true,
                            Price = 10.99,
                            ProductName = "Margherita Pizza",
                            StoreId = new Guid("275dd30a-7b06-465a-9731-e0b75f2b4441"),
                            TechnicalSpecification = "Tomato sauce, mozzarella cheese, basil leaves"
                        },
                        new
                        {
                            ID = new Guid("3e54a838-c934-46d9-952a-2a9be637ebcc"),
                            BriefDescription = "A classic pizza with tomato sauce, mozzarella cheese, and spicy pepperoni slices.",
                            CategoryId = new Guid("2d85ef10-9237-46e8-8131-955eb56c27f0"),
                            FullDescription = "The Pepperoni Pizza is a crowd-pleaser, featuring a generous layer of tangy tomato sauce, gooey mozzarella cheese, and zesty pepperoni slices. Each bite offers a perfect balance of flavors and textures, with the spicy pepperoni adding a kick of heat to the savory cheese and sauce. Whether you're hosting a party, enjoying a movie night, or simply craving a slice of comfort food, this pizza is sure to hit the spot.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/PepperoniPizza.jpg",
                            IsActive = true,
                            Price = 12.99,
                            ProductName = "Pepperoni Pizza",
                            StoreId = new Guid("275dd30a-7b06-465a-9731-e0b75f2b4441"),
                            TechnicalSpecification = "Tomato sauce, mozzarella cheese, pepperoni slices"
                        },
                        new
                        {
                            ID = new Guid("8b4970ae-2a0a-4235-9406-9490d75039ae"),
                            BriefDescription = "A tropical pizza with tomato sauce, mozzarella cheese, ham, and pineapple chunks.",
                            CategoryId = new Guid("2d85ef10-9237-46e8-8131-955eb56c27f0"),
                            FullDescription = "The Hawaiian Pizza is a tropical delight, featuring a sweet and savory combination of ingredients. It starts with a tangy tomato sauce and a layer of gooey mozzarella cheese, topped with smoky ham slices and juicy pineapple chunks. Each bite offers a burst of flavors, from the salty ham to the sweet pineapple, creating a unique and satisfying taste experience. Whether you're a fan of exotic toppings or simply enjoy a taste of the tropics, this pizza is sure to transport you to a sunny paradise.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/HawaiianPizza.jpg",
                            IsActive = true,
                            Price = 13.99,
                            ProductName = "Hawaiian Pizza",
                            StoreId = new Guid("275dd30a-7b06-465a-9731-e0b75f2b4441"),
                            TechnicalSpecification = "Tomato sauce, mozzarella cheese, ham, pineapple chunks"
                        },
                        new
                        {
                            ID = new Guid("2819c023-927e-4546-a961-2c400ed4dd75"),
                            BriefDescription = "A refreshing cola drink with a hint of vanilla and caramel flavors.",
                            CategoryId = new Guid("82de5b3d-ca35-420d-8e98-cc432b510201"),
                            FullDescription = "The Classic Coke is a timeless favorite, featuring a blend of carbonated water, sugar, caffeine, and natural flavors. It offers a crisp and refreshing taste with a hint of vanilla and caramel notes, making it a perfect companion to any meal or snack. Whether you're enjoying a burger, pizza, or dessert, this iconic cola drink is sure to quench your thirst and satisfy your cravings.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/ClassicCoke.jpg",
                            IsActive = true,
                            Price = 2.4900000000000002,
                            ProductName = "Classic Coke",
                            StoreId = new Guid("0edc6c88-6d86-42e7-9e1c-ff5821f8e366"),
                            TechnicalSpecification = "Carbonated water, sugar, caffeine, natural flavors"
                        },
                        new
                        {
                            ID = new Guid("09fdd4f0-74d9-498b-9026-56237a7573f3"),
                            BriefDescription = "A refreshing tea drink with a hint of lemon and sweetened with sugar.",
                            CategoryId = new Guid("82de5b3d-ca35-420d-8e98-cc432b510201"),
                            FullDescription = "The Iced Tea is a classic beverage that offers a cool and refreshing taste, perfect for hot summer days or as a thirst-quenching treat. Made from brewed tea leaves, sweetened with sugar, and flavored with a hint of lemon, this drink is both invigorating and satisfying. Whether you're looking for a caffeine-free alternative to soda or simply enjoy the taste of tea, this iced tea is sure to hit the spot.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/IcedTea.jpg",
                            IsActive = true,
                            Price = 2.9900000000000002,
                            ProductName = "Iced Tea",
                            StoreId = new Guid("0edc6c88-6d86-42e7-9e1c-ff5821f8e366"),
                            TechnicalSpecification = "Brewed tea leaves, sugar, lemon flavor"
                        },
                        new
                        {
                            ID = new Guid("067e22e7-1d7d-43e9-927e-63aad59be917"),
                            BriefDescription = "A refreshing blend of ripe mango, coconut milk, and pineapple for a tropical escape in a glass.",
                            CategoryId = new Guid("82de5b3d-ca35-420d-8e98-cc432b510201"),
                            FullDescription = "The Tropical Mango Smoothie is a vibrant and refreshing drink that brings the taste of the tropics to your table. This smoothie is made with ripe mangoes, sweet pineapple chunks, and creamy coconut milk, blended to a silky smooth consistency. It’s naturally sweet and packed with vitamins, offering a deliciously healthy way to cool down on a warm day. The hint of lime juice adds a refreshing citrus kick, making this smoothie both energizing and satisfying.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/TropicalMangoSmoothie.jpg",
                            IsActive = true,
                            Price = 2.9900000000000002,
                            ProductName = "Tropical Mango Smoothie",
                            StoreId = new Guid("0edc6c88-6d86-42e7-9e1c-ff5821f8e366"),
                            TechnicalSpecification = "Fresh mango, pineapple, coconut milk, lime juice, ice"
                        },
                        new
                        {
                            ID = new Guid("c6fd73b6-c00c-40fa-bb90-aca455c989e6"),
                            BriefDescription = "A rich and fudgy chocolate brownie topped with a scoop of vanilla ice cream.",
                            CategoryId = new Guid("804563c3-05f3-4997-98fd-b23e4a310fb6"),
                            FullDescription = "The Chocolate Brownie is a decadent dessert that combines the rich, fudgy texture of a brownie with the creamy sweetness of vanilla ice cream. Each bite offers a perfect balance of flavors and textures, with the warm, gooey brownie complemented by the cold, smooth ice cream. Whether you're a chocolate lover, a dessert enthusiast, or simply looking for a sweet treat to end your meal, this dessert is sure to satisfy your cravings.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/ChocolateBrownie.jpg",
                            IsActive = true,
                            Price = 5.9900000000000002,
                            ProductName = "Chocolate Brownie",
                            StoreId = new Guid("0edc6c88-6d86-42e7-9e1c-ff5821f8e366"),
                            TechnicalSpecification = "Chocolate, flour, sugar, eggs, vanilla ice cream"
                        },
                        new
                        {
                            ID = new Guid("ff91e16b-f2d5-4223-9b5f-d2e0c012544a"),
                            BriefDescription = "A creamy and tangy cheesecake with a graham cracker crust and a drizzle of raspberry sauce.",
                            CategoryId = new Guid("804563c3-05f3-4997-98fd-b23e4a310fb6"),
                            FullDescription = "The New York Cheesecake is a classic dessert that never goes out of style. It features a rich and creamy cheesecake filling on a buttery graham cracker crust, topped with a sweet and tangy raspberry sauce. Each bite offers a perfect balance of flavors and textures, with the smooth, velvety cheesecake complemented by the crunchy crust and fruity sauce. Whether you're a fan of traditional recipes or simply appreciate a good slice of cheesecake, this dessert is sure to delight your taste buds.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/NewYorkCheeseCake.jpg",
                            IsActive = true,
                            Price = 6.9900000000000002,
                            ProductName = "New York Cheesecake",
                            StoreId = new Guid("b1658d47-bc38-4690-9035-85c2e2d85d7c"),
                            TechnicalSpecification = "Cream cheese, graham crackers, sugar, eggs, raspberry sauce"
                        },
                        new
                        {
                            ID = new Guid("589fd634-9c23-4a17-8c6c-da5aa0caa12b"),
                            BriefDescription = "A classic Italian dessert made with layers of coffee-soaked ladyfingers and mascarpone cream.",
                            CategoryId = new Guid("804563c3-05f3-4997-98fd-b23e4a310fb6"),
                            FullDescription = "The Tiramisu is a beloved Italian dessert that combines the rich flavors of coffee, cocoa, and mascarpone cheese in a luscious and creamy treat. This dessert features layers of coffee-soaked ladyfingers, creamy mascarpone cheese, and a dusting of cocoa powder, creating a perfect balance of flavors and textures. Whether you're a fan of coffee-infused desserts or simply enjoy a taste of Italy, this Tiramisu is sure to transport you to a cozy cafe in Rome.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/Tiramisu.jpg",
                            IsActive = true,
                            Price = 7.9900000000000002,
                            ProductName = "Tiramisu",
                            StoreId = new Guid("b1658d47-bc38-4690-9035-85c2e2d85d7c"),
                            TechnicalSpecification = "Ladyfingers, coffee, mascarpone cheese, cocoa powder"
                        },
                        new
                        {
                            ID = new Guid("8abdff8c-6924-44e7-b9f6-4b79c0aa2dff"),
                            BriefDescription = "Crispy fried chicken wings with your choice of BBQ, buffalo, or honey mustard sauce.",
                            CategoryId = new Guid("beffabc8-6f9f-4d08-b69a-8cb5226e8486"),
                            FullDescription = "The Crispy Chicken Wings are a crowd-pleasing appetizer that offers a perfect balance of crispy skin and tender meat. These wings are fried to golden perfection and tossed in your choice of BBQ, buffalo, or honey mustard sauce, adding a burst of flavor and heat to each bite. Whether you're hosting a party, watching the game, or simply craving a savory snack, these wings are sure to hit the spot.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/CrispyChickenWing.jpg",
                            IsActive = true,
                            Price = 9.9900000000000002,
                            ProductName = "Crispy Chicken Wings",
                            StoreId = new Guid("036975aa-0bae-455a-a559-d0c914a43b27"),
                            TechnicalSpecification = "Chicken wings, flour, salt, pepper, sauce of choice"
                        },
                        new
                        {
                            ID = new Guid("609aa6e2-eedc-46c9-9ebe-45a4b23d7dc6"),
                            BriefDescription = "Crispy fried chicken tenders with your choice of BBQ, buffalo, or honey mustard sauce.",
                            CategoryId = new Guid("beffabc8-6f9f-4d08-b69a-8cb5226e8486"),
                            FullDescription = "The Crispy Chicken Tenders are a delicious and satisfying meal that offers a perfect balance of crispy coating and tender chicken meat. These tenders are fried to golden perfection and served with your choice of BBQ, buffalo, or honey mustard sauce, adding a burst of flavor and heat to each bite. Whether you're looking for a quick and tasty meal or a shareable appetizer, these tenders are sure to hit the spot.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/CrispyChickenTender.jpg",
                            IsActive = true,
                            Price = 10.99,
                            ProductName = "Crispy Chicken Tenders",
                            StoreId = new Guid("036975aa-0bae-455a-a559-d0c914a43b27"),
                            TechnicalSpecification = "Chicken tenders, flour, salt, pepper, sauce of choice"
                        },
                        new
                        {
                            ID = new Guid("13298515-27ac-4116-8394-81f6deaa4585"),
                            BriefDescription = "Grilled chicken breast on a bed of mixed greens, cherry tomatoes, cucumbers, and balsamic vinaigrette.",
                            CategoryId = new Guid("beffabc8-6f9f-4d08-b69a-8cb5226e8486"),
                            FullDescription = "The Grilled Chicken Salad is a fresh and healthy option that offers a perfect balance of flavors and textures. It features a juicy grilled chicken breast on a bed of crisp mixed greens, cherry tomatoes, and cucumbers, all drizzled with tangy balsamic vinaigrette. Whether you're looking for a light and satisfying meal or a nutritious side dish, this salad is sure to hit the spot.",
                            ImageURL = "https://prm392.blob.core.windows.net/prm392/GrilledChickenSalad.jpg",
                            IsActive = true,
                            Price = 11.99,
                            ProductName = "Grilled Chicken Salad",
                            StoreId = new Guid("036975aa-0bae-455a-a559-d0c914a43b27"),
                            TechnicalSpecification = "Grilled chicken breast, mixed greens, cherry tomatoes, cucumbers, balsamic vinaigrette"
                        });
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Store", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            ID = new Guid("deb70b97-b1fc-48f6-860c-fe9c15bcc4c7"),
                            Address = "123 Main St, District 1, Ho Chi Minh City",
                            IsActive = true,
                            StoreName = "Burger Haven"
                        },
                        new
                        {
                            ID = new Guid("275dd30a-7b06-465a-9731-e0b75f2b4441"),
                            Address = "45 Sakura Ave, District 2, Ho Chi Minh City",
                            IsActive = true,
                            StoreName = "Pizza Paradise"
                        },
                        new
                        {
                            ID = new Guid("0edc6c88-6d86-42e7-9e1c-ff5821f8e366"),
                            Address = "78 Elm St, District 3, Ho Chi Minh City",
                            IsActive = true,
                            StoreName = "Cool Refreshments"
                        },
                        new
                        {
                            ID = new Guid("b1658d47-bc38-4690-9035-85c2e2d85d7c"),
                            Address = "12 Greenway Dr, District 5, Ho Chi Minh City",
                            IsActive = true,
                            StoreName = "Sweet Indulgence"
                        },
                        new
                        {
                            ID = new Guid("036975aa-0bae-455a-a559-d0c914a43b27"),
                            Address = "99 Fiesta Ln, District 7, Ho Chi Minh City",
                            IsActive = true,
                            StoreName = "Crispy Corner"
                        });
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.StoreLocation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("StoreID");

                    b.ToTable("StoreLocations");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Cart", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.CartItem", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PRM392_Backend.Domain.Models.Product", "Product")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.ChatMessage", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Notification", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.User", "Users")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Order", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("PRM392_Backend.Domain.Models.Order", "CartID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PRM392_Backend.Domain.Models.StoreLocation", "StoreLocation")
                        .WithMany("Orders")
                        .HasForeignKey("StoreLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PRM392_Backend.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cart");

                    b.Navigation("StoreLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Payment", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("PRM392_Backend.Domain.Models.Payment", "OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Product", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PRM392_Backend.Domain.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderID");

                    b.HasOne("PRM392_Backend.Domain.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.StoreLocation", b =>
                {
                    b.HasOne("PRM392_Backend.Domain.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Product", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.StoreLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PRM392_Backend.Domain.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ChatMessages");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
